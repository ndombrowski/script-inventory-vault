"""
Title: Check correct strandedness from RNA-seq data
Description: This script checks the strandedness of RNA-seq data using a bam file as input. The bam file can be generated by mapping raw reads against a de novo assembly. The script extracts the first in pair (0x40) and extracts the read name, transcript id, position and flag. It then analyzes the strandedness of RNA-seq data based on R1 read alignments. If the **16th bit** of the flag is set (flag & 0x10), the read aligns to the **minus (reverse) strand** otherwise it maps to the forward strand.
Author: Nina Dombrowski
Date: 2025-02-03
Tags: RNA-seq, Alignment, Strandedness, BAM_processing, Quality_control
Usage: python check_strand_incl_samtools.py -b File.bam -s R1_strand_info.txt -o strand_table.txt
"""

from collections import defaultdict
import argparse
import subprocess
import shutil
import sys

def check_dependencies():
    """Check if required dependencies are available."""
    if not shutil.which("samtools"):
        print("Error: 'samtools' is not installed or not found in PATH.", file=sys.stderr)
        sys.exit(1)

        
def generate_strand_info(bam_file, output_file):
    """
    Generates the R1 strand info file from a BAM file using samtools by
    extracting the first in pair (0x40) and extracting the read name, transcript id, position and flag
    """
    with open(output_file, 'w') as out:
        process = subprocess.run(
            ["samtools", "view", "-f", "0x40", bam_file],
            stdout=subprocess.PIPE,
            text=True,
            check=True
        )
        for line in process.stdout.splitlines():
            fields = line.split('\t')
            read_name, transcript_id, pos, flag = fields[0], fields[2], fields[3], fields[1]
            out.write(f"{read_name} {transcript_id} {pos} {flag}\n")


def analyze_strandedness(input_file, output_file):
    """
    Analyzes strandedness of RNA-seq data based on R1 read alignments:
    If the **16th bit** of the flag is set (flag & 0x10), the read aligns to the **minus (reverse) strand** otherwise it maps to the forward strand

    Args:
        input_file (str): Path to the input file containing R1 strand information.
        output_file (str): Path to the output file where results will be saved.
    """
    # Initialize a dictionary to store counts
    strand_counts = defaultdict(lambda: {'plus': 0, 'minus': 0})

    # Read the R1 strand info file
    with open(input_file, 'r') as f:
        for line in f:
            read_name, transcript_id, pos, flag = line.strip().split()
            flag = int(flag)
            
            # Check if the read aligns to the minus strand
            if flag & 0x10:
                strand_counts[transcript_id]['minus'] += 1
            else:
                strand_counts[transcript_id]['plus'] += 1

    # Write the results to the output file
    with open(output_file, 'w') as f_out:
        f_out.write("#transcript\tplus_strand_1stReads\tminus_strand_1stReads\ttotal_reads\tdiff_ratio\n")
        for transcript_id, counts in strand_counts.items():
            plus = counts['plus']
            minus = counts['minus']
            total = plus + minus
            diff_ratio = (plus - minus) / total if total > 0 else 0
            f_out.write(f"{transcript_id}\t{plus}\t{minus}\t{total}\t{diff_ratio:.3f}\n")

if __name__ == "__main__":
    # Set up argument parser
    parser = argparse.ArgumentParser(
        description="Analyze strandedness of RNA-seq data based on R1 read alignments.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument(
        "-b", "--bam", 
        required=True, 
        help="Path to the input BAM file (must be sorted)."
    )
    parser.add_argument(
        "-s", "--output_samtools", 
        required=True, 
        help="Path to save intermediate results from samtools before processing."
    )
    parser.add_argument(
        "-o", "--output", 
        required=True, 
        help="Path to the output file where strand counts table will be saved."
    )
    args = parser.parse_args()

    # Check if dependencies are available before running the script
    check_dependencies()

    # Generate the R1 strand info file
    #strand_info_file = "R1_strand_info.txt"
    generate_strand_info(args.bam, args.output_samtools)

    # Analyze strandedness
    analyze_strandedness(args.output_samtools, args.output)